(spec 
	"mime-type" "0.1"
	
	(sources 
		("RFC 2045" "IETF Network Working Group" "https://datatracker.ietf.org/doc/html/rfc2045")
		("web platform tests" "web-platform-tests contributors" "https://github.com/web-platform-tests/wpt/blob/020b50e83788e69b99c0de741a2e782e1cb225a6/mimesniff/mime-types/resources/mime-types.json"))
		
	; Intend: Cover essential properties, not extension APIs.
	; In the case of MIME types, we can define numerous convenience accessors, such as is_binary?  
	; which tells us whether the MIME type is typically binary.
	; This might be modelled as a capability

	(placeholder (media-type mime-type-string))
	(placeholder (sub-type mime-type-string))
	(placeholder (parameter-named mime-type-string parameter-name))
	(placeholder (is-mime-equal? mime-type-string-1 mime-type-string-2))

	(capability 'access-types
		(test "accessing media type of basic mime type"
			((assert-equal "text" (media-type "text/plain"))))
			
		(test "accessing subtype of basic mime type"
			((assert-equal "plain" (sub-type "text/plain")))))
				

	(capability 'access-parameters
		(test "accessing parameter with single parameter"
			((assert-equal
				(parameter-named "text/plain;charset=utf-8" "charset")
				"utf-8")))

		(test "accessing parameter is case insensitive"
			((assert-equal
				(parameter-named "text/plain;charset=utf-8" "CHARSET")
				"utf-8")
			(assert-equal
				(parameter-named "text/plain;CHARSET=utf-8" "charset")
				"utf-8")))
			
		(test "accessing parameter with two parameters"
			((assert-equal
				(parameter-named "message/partial;number=2;total=3" "total")
				"3")
			(assert-equal
				(parameter-named "message/partial;number=2;total=3" "number")
				"2"))))
					
	(capability 'parsing
		(test "in case of duplicate parameters, the first value is used"
			((assert-equal
				(parameter-named "message/partial;number=2;number=3" "number")
				"2")
			(assert-equal
				(parameter-named "message/partial;number="";number=3" "number")
				""
				"First parameter is taken even in cases in which the first parameter is empty.")))
	
		(test "spaces and tabs are allowed between parameters - RFC 822 3.1.4, 3.4.2"
			((assert-equal
				(parameter-named "message/partial;number=2; total=3" "total")
				"3")
			(assert-equal
				(parameter-named "message/partial; number=2;total=3" "total")
				"3")
			(assert-equal
				(parameter-named "message/partial;number=2;  total=3" "total")
				"3")
			(assert-equal
				(parameter-named "message/partial;number=2;	total=3" "total")
				"3")))
				
		(test "parameter values can be in quotes"
			((assert-equal
				(parameter-named "message/partial;total=\"3\"" "total")
				"3")))
				
		(test "parameter values can contain MIME comments, which should not be returned"
			((assert-equal
				(parameter-named "message/partial;number=2;total=3(this is a comment)1" "total")
				"31")
			(assert-equal
				(parameter-named "message/partial;number=2;total=(this is a comment)1" "total")
				"1")
			(assert-equal
				(parameter-named "message/partial;number=2;total=3(this is a comment)" "total")
				"3")))
		
		(test "parameter keys can contain numerous special characters - RFC 2045 5.1 tspecials"
			((each
				(lambda (character) (
					(letrec 
						(key (+ "to" character "tal"))
						(mime-type-string (+ "message/partial;" key "=3"))
						((assert-equal
							(parameter-named mime-type-string key)
							"3"))))
				".-_!+#'*~{}ยง$%"))))
				
		(test "parameter values in quotes can contain all kinds of special characters"
			((assert-equal
				(parameter-named "message/partial;total=\"()<>@,\\\";:\\/[]?=\"" "total")
				"()<>@,;:\/[]?=")))
						
		; TODO: Add invalid examples
		(capability 'robustness-against-invalid-parameters
			()))
			
			
	(capability 'comparing-mime-types
		(
			((test "comparison of basic mime types"
				(assert-true  (is-mime-equal? "text/plain" "text/plain"))
				(assert-false (is-mime-equal? "image/png" "text/plain"))
				(assert-false (is-mime-equal? "text/csv" "text/plain"))
				(assert-false (is-mime-equal? "text/javascript" "application/javascript"))))
				
			(capability 'normalized-mime-type-comparison 
				(
					(test "comparison of basic mime types is case insensitive"
						(assert-true  (is-mime-equal? "TEXT/plain" "text/plain"))
						(assert-true  (is-mime-equal? "text/PLAIN" "text/plain"))))))))
